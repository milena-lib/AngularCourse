import { Injectable } from '@angular/core';
import { Workbook } from 'exceljs';
// import * as fs  from 'file-saver';
import { DatePipe } from '../../../node_modules/@angular/common';

@Injectable({
  providedIn: 'root'
})
export class ExcelService {
  
  constructor(private datePipe: DatePipe) { }

  generateExcel(header: string[], data: string[][], title: string){
    //Create workbook and worksheet
    let workbook = new Workbook();
    let worksheet = workbook.addWorksheet('SWAP Search');

    //Add Row and formatting
    let titleRow = worksheet.addRow([title]);
    titleRow.font = { name: 'Roboto', family: 4, size: 16, underline: 'double', bold: true, color: {argb: 'FF2CD5C4'} }
    worksheet.addRow([]);
    worksheet.addRow([]);

    // let subTitleRow = worksheet.addRow(['Date : ' + this.datePipe.transform(new Date(), 'medium')])
    //Add Image
    // let logo = workbook.addImage({
    //   base64: logoFile.logoBase64,
    //   extension: 'png',
    // });
    // worksheet.addImage(logo, 'E1:F3');
    worksheet.mergeCells('A1:D2');
    // worksheet.mergeCells('A4:D4');
    // //Blank Row 
    worksheet.addRow([]);

    //Add Header Row
    let headerRow = worksheet.addRow(header);
    
    // Cell Style : Fill and Border
    headerRow.eachCell((cell, number) => {
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FF2CD5C4' },
        bgColor: { argb: 'FF0000FF' }
      }
      cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
    })
    // worksheet.addRows(data);

    // Add Data and Conditional Formatting
    data.forEach(d => {
      let row = worksheet.addRow(d);
      // let qty = row.getCell(5);
      // let color = 'FF99FF99';
      // if (+qty.value < 500) {
      //   color = 'FF9999'
      // }
      // qty.fill = {
      //   type: 'pattern',
      //   pattern: 'solid',
      //   fgColor: { argb: color }
      // }
      row.eachCell((cell, number) => {
          cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
        })
      }
    );
    
    worksheet.getColumn(1).width = 15;
    worksheet.getColumn(4).width = 15;
    worksheet.getColumn(5).width = 30;
    worksheet.getColumn(6).width = 20;
    worksheet.getColumn(7).width = 15;
    worksheet.getColumn(8).width = 30;
    worksheet.getColumn(9).width = 30;
    worksheet.getColumn(12).width = 30;
    worksheet.getColumn(13).width = 20;
    worksheet.addRow([]);
    //Footer Row
    // let footerRow = worksheet.addRow(['This is system generated excel sheet.']);
    // footerRow.getCell(1).fill = {
    //   type: 'pattern',
    //   pattern: 'solid',
    //   fgColor: { argb: 'FFCCFFE5' }
    // };
    // footerRow.getCell(1).border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
    //Merge Cells
    // worksheet.mergeCells(`A${footerRow.number}:F${footerRow.number}`);
    //Generate Excel File with given name
    workbook.xlsx.writeBuffer().then((data) => {
      let blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
      // fs.saveAs(blob, 'SearchData.csv');
      
      const url = window.URL.createObjectURL(blob);
      // window.open(url);
      const anchor = document.createElement('a');
      const dateNow: Date = new Date();
      anchor.download = 'SearchSwap_' + this.datePipe.transform(dateNow, 'dd/MM/yyyy HH:mm:ss') + '.xlsx';
      anchor.href = url;
      anchor.click();
    })
  }
}
